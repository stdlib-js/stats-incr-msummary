{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport incrmsum from '@stdlib/stats-incr-msum';\nimport incrmmean from '@stdlib/stats-incr-mmean';\nimport incrmvariance from '@stdlib/stats-incr-mvariance';\nimport incrmstdev from '@stdlib/stats-incr-mstdev';\nimport incrmmin from '@stdlib/stats-incr-mmin';\nimport incrmmax from '@stdlib/stats-incr-mmax';\nimport incrmrange from '@stdlib/stats-incr-mrange';\nimport incrmmidrange from '@stdlib/stats-incr-mmidrange';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving statistical summary.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsummary( 3 );\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\nfunction incrmsummary( W ) {\n\tvar mvariance;\n\tvar mmidrange;\n\tvar summary;\n\tvar mrange;\n\tvar mstdev;\n\tvar mmean;\n\tvar msum;\n\tvar mmax;\n\tvar mmin;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( '1JF8B,Hs', W ) );\n\t}\n\tmvariance = incrmvariance( W );\n\tmmidrange = incrmmidrange( W );\n\tmrange = incrmrange( W );\n\tmstdev = incrmstdev( W );\n\tmmean = incrmmean( W );\n\tmsum = incrmsum( W );\n\tmmin = incrmmin( W );\n\tmmax = incrmmax( W );\n\tsummary = {};\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated summary. If not provided a value, the accumulator function returns the current summary.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {Object} summary\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn summary;\n\t\t}\n\t\tsummary.window = W;\n\t\tsummary.sum = msum( x );\n\t\tsummary.mean = mmean( x );\n\t\tsummary.variance = mvariance( x );\n\t\tsummary.stdev = mstdev( x );\n\t\tsummary.min = mmin( x );\n\t\tsummary.max = mmax( x );\n\t\tsummary.range = mrange( x );\n\t\tsummary.midrange = mmidrange( x );\n\t\treturn summary;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmsummary;\n"],"names":["incrmsummary","W","mvariance","mmidrange","summary","mrange","mstdev","mmean","msum","mmax","mmin","isPositiveInteger","TypeError","format","incrmvariance","incrmmidrange","incrmrange","incrmstdev","incrmmean","incrmsum","incrmmin","incrmmax","x","arguments","length","window","sum","mean","variance","stdev","min","max","range","midrange"],"mappings":";;q3BA0DA,SAASA,EAAcC,GACtB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAmBV,GACxB,MAAM,IAAIW,UAAWC,EAAQ,WAAYZ,IAY1C,OAVAC,EAAYY,EAAeb,GAC3BE,EAAYY,EAAed,GAC3BI,EAASW,EAAYf,GACrBK,EAASW,EAAYhB,GACrBM,EAAQW,EAAWjB,GACnBO,EAAOW,EAAUlB,GACjBS,EAAOU,EAAUnB,GACjBQ,EAAOY,EAAUpB,GACjBG,EAAU,CAAA,EAWV,SAAsBkB,GACrB,GAA0B,IAArBC,UAAUC,OACd,OAAOpB,EAWR,OATAA,EAAQqB,OAASxB,EACjBG,EAAQsB,IAAMlB,EAAMc,GACpBlB,EAAQuB,KAAOpB,EAAOe,GACtBlB,EAAQwB,SAAW1B,EAAWoB,GAC9BlB,EAAQyB,MAAQvB,EAAQgB,GACxBlB,EAAQ0B,IAAMpB,EAAMY,GACpBlB,EAAQ2B,IAAMtB,EAAMa,GACpBlB,EAAQ4B,MAAQ3B,EAAQiB,GACxBlB,EAAQ6B,SAAW9B,EAAWmB,GACvBlB,CACP,CACF"}