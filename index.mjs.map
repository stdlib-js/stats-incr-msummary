{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar incrmsum = require( '@stdlib/stats-incr-msum' );\nvar incrmmean = require( '@stdlib/stats-incr-mmean' );\nvar incrmvariance = require( '@stdlib/stats-incr-mvariance' );\nvar incrmstdev = require( '@stdlib/stats-incr-mstdev' );\nvar incrmmin = require( '@stdlib/stats-incr-mmin' );\nvar incrmmax = require( '@stdlib/stats-incr-mmax' );\nvar incrmrange = require( '@stdlib/stats-incr-mrange' );\nvar incrmmidrange = require( '@stdlib/stats-incr-mmidrange' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving statistical summary.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsummary( 3 );\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\nfunction incrmsummary( W ) {\n\tvar mvariance;\n\tvar mmidrange;\n\tvar summary;\n\tvar mrange;\n\tvar mstdev;\n\tvar mmean;\n\tvar msum;\n\tvar mmax;\n\tvar mmin;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmvariance = incrmvariance( W );\n\tmmidrange = incrmmidrange( W );\n\tmrange = incrmrange( W );\n\tmstdev = incrmstdev( W );\n\tmmean = incrmmean( W );\n\tmsum = incrmsum( W );\n\tmmin = incrmmin( W );\n\tmmax = incrmmax( W );\n\tsummary = {};\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated summary. If not provided a value, the accumulator function returns the current summary.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {Object} summary\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn summary;\n\t\t}\n\t\tsummary.window = W;\n\t\tsummary.sum = msum( x );\n\t\tsummary.mean = mmean( x );\n\t\tsummary.variance = mvariance( x );\n\t\tsummary.stdev = mstdev( x );\n\t\tsummary.min = mmin( x );\n\t\tsummary.max = mmax( x );\n\t\tsummary.range = mrange( x );\n\t\tsummary.midrange = mmidrange( x );\n\t\treturn summary;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmsummary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving statistical summary incrementally.\n*\n* @module @stdlib/stats-incr-msummary\n*\n* @example\n* var incrmsummary = require( '@stdlib/stats-incr-msummary' );\n*\n* var accumulator = incrmsummary( 3 );\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\n\n// MODULES //\n\nvar incrmsummary = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmsummary;\n"],"names":["isPositiveInteger","require$$0","isPrimitive","incrmsum","require$$1","incrmmean","require$$2","incrmvariance","require$$3","incrmstdev","require$$4","incrmmin","require$$5","incrmmax","require$$6","incrmrange","require$$7","incrmmidrange","require$$8","format","require$$9","lib","W","mvariance","mmidrange","summary","mrange","mstdev","mmean","msum","mmax","mmin","TypeError","x","arguments","length","window","sum","mean","variance","stdev","min","max","range","midrange"],"mappings":";;s1BAsBA,IAAIA,EAAoBC,EAAgDC,YACpEC,EAAWC,EACXC,EAAYC,EACZC,EAAgBC,EAChBC,EAAaC,EACbC,EAAWC,EACXC,EAAWC,EACXC,EAAaC,EACbC,EAAgBC,EAChBC,EAASC,EA+Eb,IC5DAC,EDQA,SAAuBC,GACtB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAM/B,EAAmBsB,GACxB,MAAM,IAAIU,UAAWb,EAAQ,kEAAmEG,IAYjG,OAVAC,EAAYhB,EAAee,GAC3BE,EAAYP,EAAeK,GAC3BI,EAASX,EAAYO,GACrBK,EAASlB,EAAYa,GACrBM,EAAQvB,EAAWiB,GACnBO,EAAO1B,EAAUmB,GACjBS,EAAOpB,EAAUW,GACjBQ,EAAOjB,EAAUS,GACjBG,EAAU,GAWV,SAAsBQ,GACrB,GAA0B,IAArBC,UAAUC,OACd,OAAOV,EAWR,OATAA,EAAQW,OAASd,EACjBG,EAAQY,IAAMR,EAAMI,GACpBR,EAAQa,KAAOV,EAAOK,GACtBR,EAAQc,SAAWhB,EAAWU,GAC9BR,EAAQe,MAAQb,EAAQM,GACxBR,EAAQgB,IAAMV,EAAME,GACpBR,EAAQiB,IAAMZ,EAAMG,GACpBR,EAAQkB,MAAQjB,EAAQO,GACxBR,EAAQmB,SAAWpB,EAAWS,GACvBR"}