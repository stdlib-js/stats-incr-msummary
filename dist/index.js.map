{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar incrmsum = require( '@stdlib/stats-incr-msum' );\nvar incrmmean = require( '@stdlib/stats-incr-mmean' );\nvar incrmvariance = require( '@stdlib/stats-incr-mvariance' );\nvar incrmstdev = require( '@stdlib/stats-incr-mstdev' );\nvar incrmmin = require( '@stdlib/stats-incr-mmin' );\nvar incrmmax = require( '@stdlib/stats-incr-mmax' );\nvar incrmrange = require( '@stdlib/stats-incr-mrange' );\nvar incrmmidrange = require( '@stdlib/stats-incr-mmidrange' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving statistical summary.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsummary( 3 );\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\nfunction incrmsummary( W ) {\n\tvar mvariance;\n\tvar mmidrange;\n\tvar summary;\n\tvar mrange;\n\tvar mstdev;\n\tvar mmean;\n\tvar msum;\n\tvar mmax;\n\tvar mmin;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmvariance = incrmvariance( W );\n\tmmidrange = incrmmidrange( W );\n\tmrange = incrmrange( W );\n\tmstdev = incrmstdev( W );\n\tmmean = incrmmean( W );\n\tmsum = incrmsum( W );\n\tmmin = incrmmin( W );\n\tmmax = incrmmax( W );\n\tsummary = {};\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated summary. If not provided a value, the accumulator function returns the current summary.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {Object} summary\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn summary;\n\t\t}\n\t\tsummary.window = W;\n\t\tsummary.sum = msum( x );\n\t\tsummary.mean = mmean( x );\n\t\tsummary.variance = mvariance( x );\n\t\tsummary.stdev = mstdev( x );\n\t\tsummary.min = mmin( x );\n\t\tsummary.max = mmax( x );\n\t\tsummary.range = mrange( x );\n\t\tsummary.midrange = mmidrange( x );\n\t\treturn summary;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmsummary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving statistical summary incrementally.\n*\n* @module @stdlib/stats-incr-msummary\n*\n* @example\n* var incrmsummary = require( '@stdlib/stats-incr-msummary' );\n*\n* var accumulator = incrmsummary( 3 );\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAoB,QAAS,oCAAqC,EAAE,YACpEC,EAAW,QAAS,yBAA0B,EAC9CC,EAAY,QAAS,0BAA2B,EAChDC,EAAgB,QAAS,8BAA+B,EACxDC,EAAa,QAAS,2BAA4B,EAClDC,EAAW,QAAS,yBAA0B,EAC9CC,EAAW,QAAS,yBAA0B,EAC9CC,EAAa,QAAS,2BAA4B,EAClDC,EAAgB,QAAS,8BAA+B,EACxDC,EAAS,QAAS,uBAAwB,EA2B9C,SAASC,EAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAK,CAACpB,EAAmBW,CAAE,EAC1B,MAAM,IAAI,UAAWF,EAAQ,kEAAmEE,CAAE,CAAE,EAErG,OAAAC,EAAYT,EAAeQ,CAAE,EAC7BE,EAAYL,EAAeG,CAAE,EAC7BI,EAASR,EAAYI,CAAE,EACvBK,EAASZ,EAAYO,CAAE,EACvBM,EAAQf,EAAWS,CAAE,EACrBO,EAAOjB,EAAUU,CAAE,EACnBS,EAAOf,EAAUM,CAAE,EACnBQ,EAAOb,EAAUK,CAAE,EACnBG,EAAU,CAAC,EAEJO,EASP,SAASA,EAAaC,EAAI,CACzB,OAAK,UAAU,SAAW,IAG1BR,EAAQ,OAASH,EACjBG,EAAQ,IAAMI,EAAMI,CAAE,EACtBR,EAAQ,KAAOG,EAAOK,CAAE,EACxBR,EAAQ,SAAWF,EAAWU,CAAE,EAChCR,EAAQ,MAAQE,EAAQM,CAAE,EAC1BR,EAAQ,IAAMM,EAAME,CAAE,EACtBR,EAAQ,IAAMK,EAAMG,CAAE,EACtBR,EAAQ,MAAQC,EAAQO,CAAE,EAC1BR,EAAQ,SAAWD,EAAWS,CAAE,GACzBR,CACR,CACD,CAKAf,EAAO,QAAUW,ICjEjB,IAAIa,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isPositiveInteger", "incrmsum", "incrmmean", "incrmvariance", "incrmstdev", "incrmmin", "incrmmax", "incrmrange", "incrmmidrange", "format", "incrmsummary", "W", "mvariance", "mmidrange", "summary", "mrange", "mstdev", "mmean", "msum", "mmax", "mmin", "accumulator", "x", "main"]
}
